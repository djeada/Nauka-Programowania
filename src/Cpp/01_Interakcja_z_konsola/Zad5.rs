 /*************************************************************************
 * This file was generated by CRUST by an automated semantics preserving
 * translation from C/C++ to Rust
 * CRUST isn't perfect and may require manual editing
 * Check warnings and errors and refer to the official Rust Documentation
 ************************************************************************/
 
/** Crust doesn't resolve C/C++ dependencies or included header.
* You may have to define your own module and implement those functionality in Rust 
* Or you can translate header file with Crust to produce Rust code. * 
* >>>>>>>> # include < cmath >
 **/
 * >>>>>>>> # include < iostream >
 **/
   fn main ( ) {   // Wyznacz wartosc funkcji y = 3x + 10 w zadanym punkcie.
  std :: 
//This statement need to be handled manually 
 cout << "podaj x" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut x : i32 ;  std :: cin >> x ;   std :: 
//This statement need to be handled manually 
 cout << "3*x+10" << std :: endl ;  std :: cout << 3 * x + 10 << std :: endl ;   // Pobierz wspolczynniki a, b oraz punkt x i wyznacz wartosc funkcji y = ax +
 // b w zadanym punkcie.
  std :: 
//This statement need to be handled manually 
 cout << "podaj a" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut a : i32 ;  std :: cin >> a ;   std :: 
//This statement need to be handled manually 
 cout << "podaj b" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut b : i32 ;  std :: cin >> b ;   std :: 
//This statement need to be handled manually 
 cout << "podaj x" << std :: endl ;  std :: cin >> x ;   std :: 
//This statement need to be handled manually 
 cout << "a*x+b" << std :: endl ;  std :: cout << a * x + b << std :: endl ;   // Wyznacz wartosc funkcji y = x^3 + 2x^2 - 20 w zadanym punkcie.
  std :: 
//This statement need to be handled manually 
 cout << "podaj x" << std :: endl ;  std :: cin >> x ;   std :: 
//This statement need to be handled manually 
 cout << "y = x**3 + 2x**2 - 20" << std :: endl ;  std :: cout << pow ( x , 3 ) + 2 * pow ( x , 2 ) - 20 << std :: endl ;   // Pobierz wspolczynniki a, b, c, d, m, n oraz punkt x i wyznacz wartosc
 // funkcji y = a*x^m + b*x^n + c - a w zadanym punkcie.
  std :: 
//This statement need to be handled manually 
 cout << "podaj a" << std :: endl ;  std :: cin >> a ;   std :: 
//This statement need to be handled manually 
 cout << "podaj b" << std :: endl ;  std :: cin >> b ;   std :: 
//This statement need to be handled manually 
 cout << "podaj c" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut c : i32 ;  std :: cin >> c ;   std :: 
//This statement need to be handled manually 
 cout << "podaj d" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut d : i32 ;  std :: cin >> d ;   std :: 
//This statement need to be handled manually 
 cout << "podaj m" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut m : i32 ;  std :: cin >> m ;   std :: 
//This statement need to be handled manually 
 cout << "podaj n" << std :: endl ;  
/*Avoid using mutable variables unless it is necessary to do so
 */
 let mut n : i32 ;  std :: cin >> n ;   std :: 
//This statement need to be handled manually 
 cout << "podaj x" << std :: endl ;  std :: cin >> x ;   std :: 
//This statement need to be handled manually 
 cout << "a*x**m + b*x**n + c - a" << std :: endl ;  std :: cout << a * pow ( x , m ) + b * pow ( x , n ) + c - a << std :: endl ;   // Wyznacz wartosc funkcji y = sin3x*cos2x + e^x^2 + log(x^3+2x^2-x-3) w
 // zadanym punkcie.
  std :: 
//This statement need to be handled manually 
 cout << "podaj x" << std :: endl ;   std :: cin >> x ;   std :: 
//This statement need to be handled manually 
 cout << "sin(3*x)*cos(2*X) + e**x**2 + log(x**3 + 2*x**2 - x - 3)"  << std :: endl ;  std :: cout << sin ( 3 * x ) * cos ( 2 * x ) + exp ( pow ( x , 2 ) ) +  log ( pow ( x , 3 ) + 2 * pow ( x , 2 ) - x - 3 )  << std :: endl ;   
/** Crust tries to identify return statement and replace with rust equivalent
 * shorthand notation. If error found in this line, Please replace shorthand notation 
 * with return statement 
 **/
 return 0 ;  } 